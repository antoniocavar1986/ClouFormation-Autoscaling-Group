AWSTemplateFormatVersion: "2010-09-09"
Description: "My API Gateway and Lambda function"

Parameters:
  apiGatewayStageName:
    Type: "string"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "call"
  lambdaFunctionName:
    Type: "string"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "my-function"

Resorces:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "ApiListS3"
      Description: "ApiListS3"
  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "GET"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lamdaFunction.arn"
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"
  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: "apiGatewayStageName"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Name: "LambdaListingS3Buckets"
      Properties:
        Code:
          ZipFile: |
            import json
            import boto3

            s3 = boto3.resource('s3')

            def lambda_handler(event, context):

                bucketlist = []
    
                for bucket in s3.buckets.all():
                  bucketlist.append(bucket.name)
      
                return {
                "statusCode": 200,
                "body": bucketlist
                }
    Description: "Lambda function for listing all s3 buckets"
    FunctionName: !Ref "lambdaFunctionName"
    Handler: "Index.handler"
    MemorySize: 128
    Role: !GetAtt "lambdaIAMRole.Arn"
    Runtime: "Python3.6"
    Timeout: 10
  
  lambdaApiGatewayInvoke:
    Type: "AWS:Lambda:Permission"
    Properties:
      Action: "lambdaInvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"
  lambdaIamRole:
    Type: "AWS:IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statenent:
          - Action
            - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
    Policies:
      - PolicyDocument:
        Version: "2012-10-17" 
        Statement:
          - Action:
             - "s3:PutObject",
             - "s3:GetObject",
             - "s3:DeleteObject"
             Effect: "Allow"
             Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
              PoliyName: "lambda"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeUrl: 
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}"

  lambdaArn: 
    Value: !GetAtt "lambdaFunction.Arn"